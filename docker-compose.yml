---
version: '3.7'
services:
  postgres-account-service:
    container_name: postgres-account
    image: postgres
    environment:
      POSTGRES_DB: account-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - ./postgres-account:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5432"
    command: -p 5431
    restart: unless-stopped

  postgres-auth-service:
    container_name: postgres-auth
    image: postgres
    environment:
      POSTGRES_DB: auth-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - ./postgres-auth:/data/postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    command: -p 5432
    restart: unless-stopped

  postgres-profile-service:
    container_name: postgres-profile
    image: postgres
    environment:
      POSTGRES_DB: profile-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - ./postgres-profile:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5432"
    command: -p 5433
    restart: unless-stopped

  ## zookeeper to orchestrate kafka cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Eureka Server
  discovery-service:
    image: gabinishimwe/discovery-service:latest
    container_name: discovery-service
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Api Gateway
  api-gateway:
    image: gabinishimwe/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8081:8081"
    expose:
      - "8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - discovery-service

  # Auth Service
  auth-service:
    image: gabinishimwe/auth-service:latest
    container_name: auth-service
    pull_policy: always
    ports:
      - "8082:8082"
    expose:
      - "8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-auth:5432/auth-service
      - TWILIO_AUTH_TOKEN=716d260d7a8be08b4c4e8889098ab909
    env_file:
      - .env
    depends_on:
      - postgres-auth-service
      - zookeeper
      - broker
      - discovery-service
      - api-gateway

  # Profile Service
  profile-service:
    image: gabinishimwe/profile-service:latest
    container_name: profile-service
    pull_policy: always
    ports:
      - "8083:8083"
    expose:
      - "8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-profile:5433/profile-service
    depends_on:
      - postgres-profile-service
      - zookeeper
      - broker
      - discovery-service
      - api-gateway
      - auth-service

  # Account Service
  account-service:
    image: gabinishimwe/account-service:latest
    container_name: account-service
    pull_policy: always
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-account:5431/account-service

    depends_on:
      - postgres-account-service
      - zookeeper
      - broker
      - discovery-service
      - api-gateway
      - auth-service
      - profile-service